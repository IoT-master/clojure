<project name="clojure" default="all" xmlns:mvn="urn:maven-artifact-ant">

  <description>
    Build with "ant jar" and then start the
    REPL with: "java -cp clojure.jar clojure.main".
    You will need to install the Maven Ant
    Tasks to ${ant.home}/lib in order to execute
    the nightly-build or stable-build targets.
  </description>


  <property file="local.properties"/>

  <!-- General android properties -->
  <property name="android.enabled" value="false"/>
  <property name="android.version" value="7"/>
  <property name="android.sdk.dir" location="/opt/android-sdk-update-manager"/>

  <property name="android.platform-tools.dir" location="${android.sdk.dir}/platform-tools"/>
  <property name="android.platform.dir" location="${android.sdk.dir}/platforms/android-${android.version}"/>
  <property name="android.jar" location="${android.platform.dir}/android.jar"/>
  <property name="dx" location="${android.platform-tools.dir}/dx"/>
  <property name="dex.file" location="classes.dex"/>

  <property name="src" location="src"/>
  <property name="test" location="test"/>
  <property name="jsrc" location="${src}/jvm"/>
  <property name="cljsrc" location="${src}/clj"/>
  <property name="build" location="classes"/>
  <property name="test-classes" location="test-classes"/>
  <property name="dist" location="dist"/>
  <!-- override this with -Ddeployment.url=scp://build.clojure.org/srv/test-deploy to test a deployment -->
  <property name="deployment.url" location="scp://build.clojure.org/srv/www/releases"/>

  <target name="debug">
	<echo message="${deployment.url}"/>
  </target>

  <!-- version related properties -->
  <property file="${cljsrc}/clojure/version.properties"/>
  <!-- ensures all version properties are present -->
  <fail unless="clojure.version.major"/>
  <fail unless="clojure.version.minor"/>
  <fail unless="clojure.version.interim"/>

  <condition property="clojure.version.incremental.label"
             value=".${clojure.version.incremental}"
             else="">
  	<length string="${clojure.version.incremental}" when="greater" length="0" />
  </condition>
  <condition property="clojure.version.qualifier.label"
             value="-${clojure.version.qualifier}"
             else="">
  	<length string="${clojure.version.qualifier}" when="greater" length="0" />
  </condition>
  <condition property="clojure.version.interim.label"
             value="-SNAPSHOT"
	         else="">
    <!-- We place -SNAPSHOT whenever interim is not set to false, not only
         if interim is set to true (this is less typo prone in the worst case -->
  	<not><equals arg1="${clojure.version.interim}" arg2="false" trim="true"/></not>
  </condition>
	
  <property name="clojure.version.label" 
    value="${clojure.version.major}.${clojure.version.minor}${clojure.version.incremental.label}${clojure.version.qualifier.label}${clojure.version.interim.label}"/>
	
  <!-- general filterset for use when clojure version must be copied -->
  <filterset id="clojure-version-filterset">
    <filter token="clojure-version" value="${clojure.version.label}"/>
  </filterset>
	
  <property name="clojure_noversion_jar" location="clojure.jar"/>
  <property name="slim_noversion_jar" location="clojure-slim.jar"/>
  <property name="src_noversion_jar" location="clojure-sources.jar"/>
  <property name="nosrc_noversion_jar" location="clojure-nosrc.jar"/>
  <property name="dex_noversion_jar" location="clojure-dex.jar"/>
  <property name="clojure_jar" location="clojure-${clojure.version.label}.jar"/>
  <property name="slim_jar" location="clojure-slim-${clojure.version.label}.jar"/>
  <property name="src_jar" location="clojure-sources-${clojure.version.label}.jar"/>
  <property name="nosrc_jar" location="clojure-nosrc-${clojure.version.label}.jar"/>
  <property name="dex_jar" location="clojure-dex-${clojure.version.label}.jar"/>

  <!-- These make sense for building on tapestry.formos.com -->

  <property name="snapshot.repo.dir" location="/var/www/maven-snapshot-repository"/>
  <property name="stable.repo.dir" location="/var/www/maven-repository"/>

  <target name="init" depends="clean">
    <tstamp/>
    <mkdir dir="${build}"/>
  	<antcall target="init-version"/>
  </target>

  <target name="init-version">
    <copy file="pom-template.xml" 
          tofile="pom.xml">
    	<filterset refid="clojure-version-filterset"/>
    </copy>
  	<!--prevents users from modifying accidentally the generated pom.xml
  	    works only on linux.-->
  	<chmod file="pom.xml" perm="ugo-w"/>
  </target>

  <macrodef name="compile-java">
    <element name="compile-elements"
             implicit="yes"
             optional="yes"/>
    <sequential>
      <javac srcdir="${jsrc}"
             destdir="${build}"
             includeJavaRuntime="true"
             includeAntRuntime="false"
             debug="true"
             source="1.5" target="1.5">
         <compile-elements/>
       </javac>
    </sequential>
  </macrodef>

  <target name="-compile-java-nodalvik" depends="init">
    <compile-java>
      <include name="**/*.java"/>
      <exclude name="**/Dalvik*.java"/>
      <exclude name="com/android/**/*.java"/>
    </compile-java>
  </target>

  <target name="-compile-java-dalvik" depends="init" if="${android.enabled}">
    <compile-java>
      <include name="**/Dalvik*.java"/>
      <include name="com/android/**/*.java"/>
      <classpath>
        <pathelement path="${android.jar}"/>
      </classpath>
    </compile-java>
  </target>

  <target name="compile-java" depends="-compile-java-nodalvik,-compile-java-dalvik"
          description="Compile Java sources."/>

  <target name="compile-clojure" depends="compile-java"
          description="Compile Clojure sources.">
    <java classname="clojure.lang.Compile"
          classpath="${build}:${cljsrc}"
          failonerror="true">
      <sysproperty key="clojure.compile.path" value="${build}"/>
      <!-- <sysproperty key="clojure.compile.warn-on-reflection" value="true"/> -->
      <arg value="clojure.core"/>
      <arg value="clojure.core.protocols"/>
      <arg value="clojure.main"/>
      <arg value="clojure.set"/>
      <arg value="clojure.xml"/>
      <arg value="clojure.zip"/>
      <arg value="clojure.inspector"/>
      <arg value="clojure.walk"/>
      <arg value="clojure.stacktrace"/>
      <arg value="clojure.template"/>
      <arg value="clojure.test"/>
      <arg value="clojure.test.tap"/>
      <arg value="clojure.test.junit"/>
      <arg value="clojure.pprint"/>
      <arg value="clojure.java.io"/>
      <arg value="clojure.repl"/>
      <arg value="clojure.java.browse"/>
      <arg value="clojure.java.javadoc"/>
      <arg value="clojure.java.shell"/>
      <arg value="clojure.java.browse-ui"/>
      <arg value="clojure.string"/>
    </java>
  </target>

  <target name="compile-tests" 
          description="Compile the subset of tests that require compilation.">
    <delete dir="${test-classes}"/>
    <mkdir dir="${test-classes}"/>
    <java classname="clojure.lang.Compile"
          classpath="${test-classes}:${test}:${build}:${cljsrc}"
          failonerror="true">
      <sysproperty key="clojure.compile.path" value="${test-classes}"/>
      <arg value="clojure.test-clojure.protocols.examples"/>
      <arg value="clojure.test-clojure.genclass.examples"/>
    </java>
  </target>

  <target name="test-only"
          description="Run clojure tests without recompiling first">
    <java classname="clojure.main" failonerror="true">
      <classpath>
        <path location="${test-classes}"/>
        <path location="${test}"/>
        <path location="${build}"/>
		<path location="${cljsrc}"/>
      </classpath>
      <arg value="-e"/>
      <arg value="(require '(clojure [test-clojure :as main])) (main/run-ant)"/>
    </java>
  </target>

  <target name="test"
          description="Run clojure tests after compiling all sources and test sources"
          depends="compile-java, compile-clojure, compile-tests, test-only">
  </target>

  <target name="clojure-jar" depends="test"
          description="Create clojure jar file.">
    <jar jarfile="${clojure_jar}" basedir="${build}">
      <fileset dir="${cljsrc}">
        <include name="**/*.clj"/>
        <include name="clojure/version.properties"/>
      </fileset>
      <manifest>
        <attribute name="Main-Class" value="clojure.main"/>
        <attribute name="Class-Path" value="."/>
      </manifest>
    </jar>
    <copy file="${clojure_jar}" tofile="${clojure_noversion_jar}" />
  </target>

  <target name="clojure-jar-slim" depends="test"
          description="Create clojure-slim jar file (omits compiled Clojure code)">
    <jar jarfile="${slim_jar}">
      <fileset dir="${build}" includes="clojure/asm/**"/>
      <fileset dir="${build}" includes="clojure/lang/**"/>
      <fileset dir="${build}" includes="clojure/main.class"/>
      <fileset dir="${cljsrc}">
        <include name="**/*.clj"/>
        <include name="clojure/version.properties"/>
      </fileset>
      <manifest>
        <attribute name="Main-Class" value="clojure.main"/>
        <attribute name="Class-Path" value="."/>
      </manifest>
    </jar>
    <copy file="${slim_jar}" tofile="${slim_noversion_jar}" />
  </target>

  <target name="clojure-jar-sources" depends="test"
          description="Create a JAR of Java sources.">
    <jar jarfile="${src_jar}" basedir="${jsrc}" includes="**/*">
      <fileset dir="${cljsrc}"
               includes="clojure/version.properties"/>
    </jar>
    <copy file="${src_jar}" tofile="${src_noversion_jar}" />
  </target>

  <target name="clojure-jar-no-sources" depends="clojure-jar" if="${android.enabled}">
      <jar jarfile="${nosrc_jar}">
          <zipfileset src="${clojure_jar}">
              <include name="**/*.class"/>
              <include name="clojure/version.properties"/>
          </zipfileset>
          <manifest>
              <attribute name="Main-Class" value="clojure.main"/>
              <attribute name="Class-Path" value="."/>
          </manifest>
      </jar>
      <copy file="${nosrc_jar}" tofile="${nosrc_noversion_jar}" />
  </target>

  <target name="dex" depends="clojure-jar-no-sources" if="${android.enabled}">
      <exec executable="${dx}" failonerror="true">
          <arg value="--dex"/>
          <arg value="--output=${dex.file}" />
          <arg path="${nosrc_jar}"/>
      </exec>
  </target>

  <target name="clojure-jar-dex" depends="dex" if="${android.enabled}">
      <jar jarfile="${dex_jar}">
          <fileset dir="${cljsrc}" includes="clojure/version.properties"/>
          <mappedresources>
              <files includes="${dex.file}"/>
              <mergemapper to="classes.dex"/>
          </mappedresources>
      </jar>
      <copy file="${dex_jar}" tofile="${dex_noversion_jar}" />
  </target>

  <target name="all" depends="clojure-jar,clojure-jar-slim,clojure-jar-sources,clojure-jar-no-sources,clojure-jar-dex"/>

  <target name="clean"
          description="Remove autogenerated files and directories.">
    <delete dir="${build}"/>
    <delete dir="${test-classes}"/>
    <delete dir="${dist}"/>
    <delete file="pom.xml"/>
    <delete file="${dex.file}"/>
    <delete verbose="true">
      <fileset dir="${basedir}" includes="*.jar"/>
      <fileset dir="${basedir}" includes="*.zip"/>
    </delete>
  </target>

  <target name="setup-maven">
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"/>
  </target>

  <target name="nightly-build" depends="ci-build"
          description="Build and deploy to nightly (snapshot) repository.">
    <sequential>
      <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"/>
      <mvn:deploy file="${clojure_jar}">
        <pom file="pom.xml"/>
        <attach file="${src_jar}" classifier="sources"/>
        <attach file="${slim_jar}" classifier="slim"/>
        <remoteRepository url="file:${snapshot.repo.dir}"/>
      </mvn:deploy>
    </sequential>
  </target>

  <target name="release" depends="ci-build,dist" description="Build and deploy to remote stable repository.">
    <sequential>
      <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"/>
      <mvn:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/>
      <echo message="Deploying to ${deployment.url}"/>
      <mvn:deploy file="${clojure_jar}">
        <pom file="pom.xml"/>
        <attach file="${src_jar}" classifier="sources"/>
        <attach file="${slim_jar}" classifier="slim"/>
        <remoteRepository url="${deployment.url}">
          <authentication username="root" privateKey="${user.home}/.ssh/id_rsa"/>
        </remoteRepository>
      </mvn:deploy>
    </sequential>
  </target>

  <target name="ci-build" depends="clean,all,setup-maven"
          description="Continous integration build, installed to local repository.">
    <mvn:install file="${clojure_jar}">
      <pom file="pom.xml"/>
      <attach file="${src_jar}" classifier="sources"/>
      <attach file="${slim_jar}" classifier="slim"/>
    </mvn:install>
  </target>

  <target name="dist" depends="clean,clojure-jar"
          description="Build distribution ZIP file">
    <property name="distdir" value="${dist}/clojure-${clojure.version.label}"/>
    <mkdir dir="${distdir}"/>
    <copy todir="${distdir}" includeEmptyDirs="false">
      <fileset dir="${basedir}">
        <exclude name="pom.xml"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/*.class"/>
        <exclude name="**/*.iml"/>
        <exclude name="**/*.ipr"/>
        <exclude name="**/*.iws"/>
        <exclude name="**/*.jar"/>
      </fileset>
    </copy>
    <copy file="${clojure_noversion_jar}" todir="${distdir}"/>
    <zip basedir="${dist}" destfile="clojure-${clojure.version.label}.zip"/>
  </target>
</project>
